@page
@model WebRazorPages1.Pages.IndexModel
@{
    ViewData["Title"] = "Inicio";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="titulo-seccion text-light m-0">TAREAS ASIGNADAS</h2>
        <form method="get" class="d-flex align-items-center gap-2">
            <label for="cantidadRegistrosPorPagina" class="text-light m-0 text-nowrap">Tareas por página</label>
            <input
                id="cantidadRegistrosPorPagina"
                name="cantidadRegistrosPorPagina"
                class="form-control form-control-sm"
                type="number"
                min="1"
                max="99"
                inputmode="numeric"
                placeholder="5"
                value="@(Model.CantidadDeRegistrosPorPagina)"
                oninput="this.value = this.value.replace(/\D/g,'').slice(0,2)"
                style="width: 70px;"
            />
            <input type="hidden" name="q" value="@(Model.TextoDeBusqueda)" />
            <input type="hidden" name="pagina" value="1" />
            <button type="submit" class="btn btn-sm btn-primary text-nowrap">👁️ Aplicar</button>
            <button type="button" class="btn btn-sm btn-success text-nowrap" data-bs-toggle="modal" data-bs-target="#modalNuevaTarea">
                    ➕ Nueva Tarea
            </button>
        </form>
    </div>

    <div class="d-flex justify-content-start align-items-center mb-3">
        <form id="formulario-busqueda" method="get" class="d-flex align-items-center gap-2">
            <label for="q" class="text-light m-0 text-nowrap">Buscar</label>
            <input
                id="q"
                name="q"
                class="form-control form-control-sm"
                type="search"
                value="@(Model.TextoDeBusqueda)"
                placeholder="🔍 Escribe para filtrar…"
                autocomplete="off"
                style="width: 250px;"
            />
            <input type="hidden" name="cantidadRegistrosPorPagina" value="@(Model.CantidadDeRegistrosPorPagina)" />
            <input type="hidden" name="pagina" value="1" />
        </form>
    </div>

    <div class="card-tabla p-3">
        <nav class="mt-3">
            <ul class="pagination justify-content-center flex-wrap">
                @for (int i = 1; i <= Model.CantidadTotalDePaginas; i++)
                {
                    <li class="page-item @(i == Model.NumeroDePaginaActual ? "active" : "")">
                        <a class="page-link"
                           asp-page="./Index"
                           asp-route-pagina="@i"
                           asp-route-cantidadRegistrosPorPagina="@Model.CantidadDeRegistrosPorPagina"
                           asp-route-filtroEstado="@Model.FiltroEstado"
                           asp-route-q="@(Model.TextoDeBusqueda)">
                            @i
                        </a>
                    </li>
                }
            </ul>
        </nav>

        <div class="table-responsive">
            <table class="table table-bordered table-hover text-center mb-0">
                <thead>
                    <tr>
                        <th class="text-white">Nombre Tarea</th>
                        <th class="text-white">Fecha Vencimiento</th>
                        <th class="text-white">Estado</th>
                        <th class="text-white">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var tarea in Model.ListaDeTareasDeLaPagina)
                {
                    <tr>
                        <td class="text-white">@tarea.NombreDeLaTarea</td>
                        <td class="text-white">@tarea.FechaDeVencimiento</td>
                        <td class="text-white">
                            <span class="badge @(tarea.EstadoDeLaTarea switch {
                                "Pendiente" => "bg-warning text-dark",
                                "En curso" => "bg-info text-dark",
                                "Finalizado" => "bg-success text-dark",
                                "Cancelado" => "bg-danger text-dark",
                                _ => "bg-secondary"
                            })">
                                @tarea.EstadoDeLaTarea
                            </span>
                        </td>
                        <td class="d-flex justify-content-center gap-2">
                            <button type="button"
                                    class="btn btn-sm btn-success btn-abrir-edicion"
                                    data-bs-toggle="modal"
                                    data-bs-target="#modalEditarTarea"
                                    data-id="@tarea.IdTarea"
                                    data-nombre="@tarea.NombreDeLaTarea"
                                    data-fecha-iso="@Model.ConvertirAFechaISO(tarea.FechaDeVencimiento)">
                                ✅ Editar
                            </button>
                            <button class="btn btn-sm btn-danger">🗑️ Eliminar</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal Crear Tarea -->
<div class="modal fade" id="modalNuevaTarea" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content" style="background:#0f1113; color:#f8f9fa; border:1px solid #2b2f33;">
      <div class="modal-header" style="background: linear-gradient(90deg, #2c3e50, #6c5ce7); color:#f8f9fa;">
        <h5 class="modal-title">Crear nueva tarea</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>

      <form method="post" asp-page-handler="Crear" class="modal-body d-flex flex-column gap-3">
        <div>
          <label for="NuevoNombreDeLaTarea" class="form-label m-0">Nombre de la tarea</label>
          <input id="NuevoNombreDeLaTarea"
                 name="NuevoNombreDeLaTarea"
                 class="form-control"
                 type="text"
                 maxlength="50"
                 required
                 placeholder="Ej: Escribir informe semanal"
                 oninvalid="this.setCustomValidity('El nombre es obligatorio (máx. 50).')"
                 oninput="this.setCustomValidity('')"/>
          <div class="form-text text-secondary">Máximo 50 caracteres.</div>
        </div>

        <div>
          <label for="NuevaFechaDeVencimiento" class="form-label m-0">Fecha de vencimiento</label>
          <input id="NuevaFechaDeVencimiento"
               name="NuevaFechaDeVencimiento"
               class="form-control"
               type="date"
               min="@DateTime.Today.ToString("yyyy-MM-dd")"
               value="@DateTime.Today.ToString("yyyy-MM-dd")"
               required
               oninvalid="this.setCustomValidity('La fecha debe ser hoy o futura.')"
               oninput="this.setCustomValidity('')"/>
          <div class="form-text text-secondary">Solo fechas desde hoy en adelante.</div>
        </div>

        <div class="d-flex justify-content-end gap-2 mt-2">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" class="btn btn-success">✅ Crear Tarea</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Modal Editar Tarea -->
<div class="modal fade" id="modalEditarTarea" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content" style="background:#0f1113; color:#f8f9fa; border:1px solid #2b2f33;">
      <div class="modal-header" style="background: linear-gradient(90deg, #2c3e50, #6c5ce7); color:#f8f9fa;">
        <h5 class="modal-title">Editar tarea</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>

      <form method="post" asp-page-handler="Editar" class="modal-body d-flex flex-column gap-3">
        <!-- ID oculto -->
        <input type="hidden" id="IdTareaEditar" name="IdTareaEditar" />

        <div>
          <label for="NombreEditadoDeLaTarea" class="form-label m-0">Nombre de la tarea</label>
          <input id="NombreEditadoDeLaTarea"
                 name="NombreEditadoDeLaTarea"
                 class="form-control"
                 type="text"
                 maxlength="50"
                 required
                 placeholder="Ej: Escribir informe semanal"
                 oninvalid="this.setCustomValidity('El nombre es obligatorio (máx. 50).')"
                 oninput="this.setCustomValidity('')" />
          <div class="form-text text-secondary">Máximo 50 caracteres.</div>
        </div>

        <div>
          <label for="FechaEditadaDeVencimiento" class="form-label m-0">Fecha de vencimiento</label>
          <input id="FechaEditadaDeVencimiento"
                 name="FechaEditadaDeVencimiento"
                 class="form-control"
                 type="date"
                 min="@DateTime.Today.ToString("yyyy-MM-dd")"
                 required
                 oninvalid="this.setCustomValidity('La fecha debe ser hoy o futura.')"
                 oninput="this.setCustomValidity('')" />
          <div class="form-text text-secondary">Solo fechas desde hoy en adelante.</div>
        </div>

        <div class="d-flex justify-content-end gap-2 mt-2">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" class="btn btn-success">💾 Guardar cambios</button>
        </div>
      </form>
    </div>
  </div>
</div>

@section Scripts{
<script>
(() => {
    const formularioBusqueda = document.getElementById('formulario-busqueda');
    const campoBusqueda = document.getElementById('q');
    let temporizadorEspera;
    const esperaMilisegundos = 600;

    if (campoBusqueda) {
        campoBusqueda.focus();
        const valor = campoBusqueda.value;
        campoBusqueda.value = '';
        campoBusqueda.value = valor;
    }

    if (formularioBusqueda && campoBusqueda) {
        campoBusqueda.addEventListener('input', () => {
            clearTimeout(temporizadorEspera);
            temporizadorEspera = setTimeout(() => {
                // Cambiar a página 1 al buscar
                formularioBusqueda.querySelector('input[name="pagina"]').value = "1";
                formularioBusqueda.submit();               
            }, esperaMilisegundos);
        });
    }
})();
</script>
<script>
(() => {
  const modalEditar = document.getElementById('modalEditarTarea');
  if (!modalEditar) return;

  modalEditar.addEventListener('show.bs.modal', (evento) => {
    const boton = evento.relatedTarget;
    if (!boton) return;

    const id = boton.getAttribute('data-id');
    const nombre = boton.getAttribute('data-nombre');
    const fechaISO = boton.getAttribute('data-fecha-iso');

    const campoId = modalEditar.querySelector('#IdTareaEditar');
    const campoNombre = modalEditar.querySelector('#NombreEditadoDeLaTarea');
    const campoFecha = modalEditar.querySelector('#FechaEditadaDeVencimiento');

    if (campoId) campoId.value = id || '';
    if (campoNombre) {
      campoNombre.value = nombre || '';
      const v = campoNombre.value;
      campoNombre.value = '';
      campoNombre.value = v;
      campoNombre.focus();
    }
    if (campoFecha) campoFecha.value = fechaISO || new Date().toISOString().slice(0,10);
  });
})();
</script>
}
